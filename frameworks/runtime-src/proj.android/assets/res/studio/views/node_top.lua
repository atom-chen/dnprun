--------------------------------------------------------------
-- This file was automatically generated by Cocos Studio.
-- Do not make changes to this file.
-- All changes will be lost.
--------------------------------------------------------------

local luaExtend = require "LuaExtend"

-- using for layout to decrease count of local variables
local layout = nil
local localLuaFile = nil
local innerCSD = nil
local innerProject = nil
local localFrame = nil

local Result = {}
------------------------------------------------------------
-- function call description
-- create function caller should provide a function to 
-- get a callback function in creating scene process.
-- the returned callback function will be registered to 
-- the callback event of the control.
-- the function provider is as below :
-- Callback callBackProvider(luaFileName, node, callbackName)
-- parameter description:
-- luaFileName  : a string, lua file name
-- node         : a Node, event source
-- callbackName : a string, callback function name
-- the return value is a callback function
------------------------------------------------------------
function Result.create(callBackProvider)

local result={}
setmetatable(result, luaExtend)

--Create Node
local Node=cc.Node:create()
Node:setName("Node")

--Create Panel_1
local Panel_1 = ccui.Layout:create()
Panel_1:ignoreContentAdaptWithSize(false)
Panel_1:setClippingEnabled(false)
Panel_1:setBackGroundColorType(1)
Panel_1:setBackGroundColor({r = 255, g = 255, b = 255})
Panel_1:setBackGroundColorOpacity(0)
Panel_1:setLayoutComponentEnabled(true)
Panel_1:setName("Panel_1")
Panel_1:setTag(35)
Panel_1:setCascadeColorEnabled(true)
Panel_1:setCascadeOpacityEnabled(true)
Panel_1:setAnchorPoint(0.5000, 1.0000)
layout = ccui.LayoutComponent:bindLayoutComponent(Panel_1)
layout:setPositionPercentXEnabled(true)
layout:setPositionPercentYEnabled(true)
layout:setSize({width = 649.0000, height = 352.0000})
layout:setLeftMargin(-324.5000)
layout:setRightMargin(-324.5000)
layout:setBottomMargin(-352.0000)
Node:addChild(Panel_1)

--Create top_1
local top_1 = cc.Sprite:create("Resource/atlas/top.png")
top_1:setName("top_1")
top_1:setTag(36)
top_1:setCascadeColorEnabled(true)
top_1:setCascadeOpacityEnabled(true)
top_1:setPosition(325.3503, 450.0000)
layout = ccui.LayoutComponent:bindLayoutComponent(top_1)
layout:setPositionPercentX(0.5013)
layout:setPositionPercentY(1.2784)
layout:setPercentWidth(1.1094)
layout:setPercentHeight(1.0000)
layout:setSize({width = 720.0000, height = 352.0000})
layout:setLeftMargin(-34.6497)
layout:setRightMargin(-36.3503)
layout:setTopMargin(-274.0000)
layout:setBottomMargin(274.0000)
top_1:setBlendFunc({src = 1, dst = 771})
Panel_1:addChild(top_1)

--Create Button_1
local Button_1 = ccui.Button:create()
Button_1:ignoreContentAdaptWithSize(false)
cc.SpriteFrameCache:getInstance():addSpriteFrames("Resource/atlas/common.plist")
Button_1:loadTextureNormal("l-q.png",1)
cc.SpriteFrameCache:getInstance():addSpriteFrames("Resource/atlas/common.plist")
Button_1:loadTexturePressed("l-p-6.png",1)
cc.SpriteFrameCache:getInstance():addSpriteFrames("Resource/atlas/common.plist")
Button_1:loadTextureDisabled("l-lock.png",1)
Button_1:setTitleFontSize(14)
Button_1:setTitleColor({r = 65, g = 65, b = 70})
Button_1:setScale9Enabled(true)
Button_1:setCapInsets({x = 15, y = 11, width = 131, height = 138})
Button_1:setLayoutComponentEnabled(true)
Button_1:setName("Button_1")
Button_1:setTag(56)
Button_1:setCascadeColorEnabled(true)
Button_1:setCascadeOpacityEnabled(true)
Button_1:setPosition(139.0395, 189.7177)
if callBackProvider~=nil then
      Button_1:addClickEventListener(callBackProvider("node_top.lua", Button_1, "onHeadClick"))
end
layout = ccui.LayoutComponent:bindLayoutComponent(Button_1)
layout:setPositionPercentX(0.1931)
layout:setPositionPercentY(0.5390)
layout:setPercentWidth(0.2236)
layout:setPercentHeight(0.4545)
layout:setSize({width = 161.0000, height = 160.0000})
layout:setLeftMargin(58.5395)
layout:setRightMargin(500.4605)
layout:setTopMargin(82.2823)
layout:setBottomMargin(109.7177)
top_1:addChild(Button_1)

--Create Animation
result['animation'] = ccs.ActionTimeline:create()
  
result['animation']:setDuration(30)
result['animation']:setTimeSpeed(1.0000)

--Create PositionTimeline
local PositionTimeline = ccs.Timeline:create()

localFrame = ccs.PositionFrame:create()
localFrame:setFrameIndex(0)
localFrame:setTween(true)
localFrame:setTweenType(12)
localFrame:setX(325.3503)
localFrame:setY(450.0000)
PositionTimeline:addFrame(localFrame)

localFrame = ccs.PositionFrame:create()
localFrame:setFrameIndex(30)
localFrame:setTween(true)
localFrame:setTweenType(0)
localFrame:setX(325.3503)
localFrame:setY(231.1871)
PositionTimeline:addFrame(localFrame)

result['animation']:addTimeline(PositionTimeline)
PositionTimeline:setNode(top_1)

--Create ScaleTimeline
local ScaleTimeline = ccs.Timeline:create()

localFrame = ccs.ScaleFrame:create()
localFrame:setFrameIndex(0)
localFrame:setTween(true)
localFrame:setTweenType(12)
localFrame:setScaleX(1.0000)
localFrame:setScaleY(1.0000)
ScaleTimeline:addFrame(localFrame)

localFrame = ccs.ScaleFrame:create()
localFrame:setFrameIndex(30)
localFrame:setTween(true)
localFrame:setTweenType(0)
localFrame:setScaleX(1.0000)
localFrame:setScaleY(1.0000)
ScaleTimeline:addFrame(localFrame)

result['animation']:addTimeline(ScaleTimeline)
ScaleTimeline:setNode(top_1)

--Create RotationSkewTimeline
local RotationSkewTimeline = ccs.Timeline:create()

localFrame = ccs.RotationSkewFrame:create()
localFrame:setFrameIndex(0)
localFrame:setTween(true)
localFrame:setTweenType(12)
localFrame:setSkewX(0.0000)
localFrame:setSkewY(0.0000)
RotationSkewTimeline:addFrame(localFrame)

localFrame = ccs.RotationSkewFrame:create()
localFrame:setFrameIndex(30)
localFrame:setTween(true)
localFrame:setTweenType(0)
localFrame:setSkewX(0.0000)
localFrame:setSkewY(0.0000)
RotationSkewTimeline:addFrame(localFrame)

result['animation']:addTimeline(RotationSkewTimeline)
RotationSkewTimeline:setNode(top_1)
--Create Animation List
local enter = {name="enter", startIndex=0, endIndex=60}
result['animation']:addAnimationInfo(enter)

result['root'] = Node
return result;
end

return Result

